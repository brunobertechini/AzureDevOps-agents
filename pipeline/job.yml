parameters:
  jobs: []
  tag: string
  image: string
  OSVersion: string

jobs:
- ${{ each job in parameters.jobs }}: # Each job
  - ${{ each pair in job }}:          # Insert all properties other than "steps"
      ${{ if ne(pair.key, 'steps') }}:
        ${{ pair.key }}: ${{ pair.value }}
    variables:
      JOB_CONTAINER_REGISTRY: $(DOCKER_REGISTRY)
      JOB_REPOSITORY: $(DOCKER_HUB_USER)/${{ parameters.image }}
      JOB_DOCKER_FILE: $(Build.SourcesDirectory)/${{ parameters.OSVersion }}-${{ job.job }}/Dockerfile
      JOB_BUILD_CONTEXT: $(Build.SourcesDirectory)/${{ parameters.OSVersion }}-${{ job.job }}
      ${{ if eq(parameters.tag, 'latest') }}:
        JOB_DOCKER_TAG: ${{ job.job }}
      ${{ if ne(parameters.tag, 'latest') }}:
        JOB_DOCKER_TAG: ${{ job.job }}-${{ parameters.tag }}
      ${{ if eq(parameters.tag, 'latest') }}:
        JOB_BUILD_ARGS: --build-arg FROM_IMAGE=$(DOCKER_HUB_USER)/${{ parameters.image }} --build-arg FROM_IMAGE_TAG=base
      ${{ if ne(parameters.tag, 'latest') }}:
        JOB_BUILD_ARGS: --build-arg FROM_IMAGE=$(DOCKER_HUB_USER)/${{ parameters.image }} --build-arg FROM_IMAGE_TAG=base-$(TAG)
      
      
    steps:
    - bash: |
        echo "========================="
        echo "Pipeline Variables:"
        echo "========================="
        echo "DOCKER_REGISTRY=$(DOCKER_REGISTRY)"
        echo "DOCKER_HUB_USER=$(DOCKER_HUB_USER)"
        echo "========================="
        echo "Job Variables: "
        echo "========================="
        echo "JOB_CONTAINER_REGISTRY=$(JOB_CONTAINER_REGISTRY)"
        echo "JOB_REPOSITORY=$(JOB_REPOSITORY)"
        echo "JOB_DOCKER_FILE=$(JOB_DOCKER_FILE)"
        echo "JOB_BUILD_CONTEXT=$(JOB_BUILD_CONTEXT)"
        echo "JOB_BUILD_ARGS=$(JOB_BUILD_ARGS)"
        echo "JOB_DOCKER_TAG=$(JOB_DOCKER_TAG)"
        echo "========================="
        echo "Environment Variables"
        echo "========================="
        set
      displayName: Debug Variables
    
    - task: Docker@2
      displayName: 'Docker Login'
      inputs:
        containerRegistry: $(DOCKER_REGISTRY)
        command: 'login'
    
    - task: Docker@2
      displayName: Build image
      inputs:
        command: build
        containerRegistry: $(DOCKER_REGISTRY)
        repository: $(JOB_REPOSITORY)
        dockerfile: '$(JOB_DOCKER_FILE)'
        buildContext: '$(JOB_BUILD_CONTEXT)'
        arguments: $(JOB_BUILD_ARGS)
        tags: $(JOB_DOCKER_TAG)
    
    - task: Docker@2
      displayName: 'Push Image'
      inputs:
        containerRegistry: $(DOCKER_REGISTRY)
        repository: $(JOB_REPOSITORY)
        command: 'push'
        tags: $(JOB_DOCKER_TAG)
